AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Legal Audio STT Workflow with Custom Resource to Resolve Circular Dependency

Parameters:
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: API Key for OpenAI integration

Globals:
  Function:
    Timeout: 900
    Runtime: python3.9

Resources:
  PythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ja-stt-python-layer
      Description: Python dependencies for STT Process Lambdas
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile
      BuildProperties:
        Makefile: layer/makefile

  AudioUploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-audio-uploads'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt StartLambda.Arn

  AudioUploadsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref AudioUploadsBucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service: transcribe.amazonaws.com
            Action: 
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - !Sub "arn:aws:s3:::${AudioUploadsBucket}"
              - !Sub "arn:aws:s3:::${AudioUploadsBucket}/*"

  TranscriptionOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-transcription-outputs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  TranscriptionOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-transcription-outputs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  TranscriptionOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TranscriptionOutputBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: transcribe.amazonaws.com
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource:
              - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}"
              - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}/*"

  StartLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          STT_WORKFLOW_ARN: !ImportValue TranscriptionWorkflowArn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !ImportValue TranscriptionWorkflowArn

  StartLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StartLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt AudioUploadsBucket.Arn

  DataLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref AudioUploadsBucket
      Layers:
        - !Ref PythonLayer

  TranscribeLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transcribe/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref TranscriptionOutputBucket
        - S3ReadPolicy:
            BucketName: !Ref AudioUploadsBucket
        - Statement:
            - Effect: Allow
              Action:
                - transcribe:StartTranscriptionJob
                - transcribe:GetTranscriptionJob
                - transcribe:DeleteTranscriptionJob
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
              Resource:
                - !Sub "arn:aws:s3:::${AudioUploadsBucket}"
                - !Sub "arn:aws:s3:::${AudioUploadsBucket}/*"
                - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}"
                - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}/*"
      Layers:
        - !Ref PythonLayer

  EnhanceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: enhance/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref TranscriptionOutputBucket
        - S3WritePolicy:
            BucketName: !Ref TranscriptionOutputBucket
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}"
              - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}/*"
      Layers:
        - !Ref PythonLayer

  StoreLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: store/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref TranscriptionOutputBucket
        - S3WritePolicy:
            BucketName: !Ref TranscriptionOutputBucket
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}"
              - !Sub "arn:aws:s3:::${TranscriptionOutputBucket}/*"
      Layers:
        - !Ref PythonLayer

  DataLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DataLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt AudioUploadsBucket.Arn

Outputs:
  DataLambdaArn:
    Value: !GetAtt DataLambda.Arn
    Export:
      Name: DataLambdaArn

  TranscribeLambdaArn:
    Value: !GetAtt TranscribeLambda.Arn
    Export:
      Name: TranscribeLambdaArn

  EnhanceLambdaArn:
    Value: !GetAtt EnhanceLambda.Arn
    Export:
      Name: EnhanceLambdaArn

  StoreLambdaArn:
    Value: !GetAtt StoreLambda.Arn
    Export:
      Name: StoreLambdaArn

  AudioUploadsBucketName:
    Description: "Audio Uploads S3 Bucket Name"
    Value: !Ref AudioUploadsBucket

  TranscriptionOutputBucketName:
    Description: "Transcription Outputs S3 Bucket Name"
    Value: !Ref TranscriptionOutputBucket